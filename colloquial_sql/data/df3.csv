prompt,response
"Show me the latest purchase from the customers.

TABLE_DEFINITIONS

Customers: id (integer), name (text), email (text), created_at (timestamp)
Purchases: id (integer), customer_id (integer), product_id (integer), purchase_date (timestamp), amount (decimal)","To get the latest purchase from the customers, we will join the Customers and Purchases tables on customer_id. Then, we will sort the purchases by purchase_date in descending order and limit the results to the most recent one.
            ---------
SELECT Customers.*, Purchases.*
FROM Customers
INNER JOIN Purchases ON Customers.id = Purchases.customer_id
ORDER BY Purchases.purchase_date DESC
LIMIT 1;"
"I need to know the total sales for product 123.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total sales for product 123, we will sum the quantity_sold from the Sales table where the product_id is 123.
            ---------
SELECT SUM(quantity_sold) as total_sales
FROM Sales
WHERE product_id = 123;"
"Can you find me the average rating for the movie ""Inception""?

TABLE_DEFINITIONS

Movies: id (integer), title (text), release_date (timestamp)
Ratings: id (integer), movie_id (integer), rating (decimal), rated_at (timestamp)","To find the average rating for the movie ""Inception"", we will first find the id of the movie from the Movies table. Then, we will average the ratings from the Ratings table where the movie_id matches the id of ""Inception"".
            ---------
SELECT AVG(rating) as average_rating
FROM Ratings
WHERE movie_id = (SELECT id FROM Movies WHERE title = 'Inception');"
"Show me the details of the employee who has the highest salary.

TABLE_DEFINITIONS

Employees: id (integer), name (text), position (text), hire_date (timestamp)
Salaries: id (integer), employee_id (integer), salary (decimal), effective_date (timestamp)","To get the details of the employee who has the highest salary, we will join the Employees and Salaries tables on employee_id. Then, we will sort the results by salary in descending order and limit the results to the one with the highest salary.
            ---------
SELECT Employees.*
FROM Employees
INNER JOIN Salaries ON Employees.id = Salaries.employee_id
ORDER BY Salaries.salary DESC
LIMIT 1;"
"Find me the total number of books sold by author ""J.K. Rowling"".

TABLE_DEFINITIONS

Books: id (integer), title (text), author (text), published_date (timestamp)
Sales: id (integer), book_id (integer), quantity_sold (integer), sale_date (timestamp)","To find the total number of books sold by author ""J.K. Rowling"", we will first get the ids of the books written by her from the Books table. Then, we will sum the quantity_sold from the Sales table where the book_id matches those of ""J.K. Rowling""'s books.
            ---------
SELECT SUM(quantity_sold) as total_books_sold
FROM Sales
WHERE book_id IN (SELECT id FROM Books WHERE author = 'J.K. Rowling');"
"I need to know the total revenue generated by the product named ""iPhone"".

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total revenue generated by the product named ""iPhone"", we will first get the price of the ""iPhone"" from the Products table. Then, we will sum the product of the price and quantity_sold from the Sales table where the product_id matches that of the ""iPhone"".
            ---------
SELECT SUM(Products.price * Sales.quantity_sold) as total_revenue
FROM Sales
INNER JOIN Products ON Sales.product_id = Products.id
WHERE Products.name = 'iPhone';"
"Show me the most popular product based on the number of sales.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To find the most popular product based on the number of sales, we will sum the quantity_sold from the Sales table for each product_id. Then, we will sort the results in descending order and limit the results to the one with the highest quantity_sold. Finally, we will join this result with the Products table to get the product details.
            ---------
SELECT Products.*, SUM(Sales.quantity_sold) as total_sold
FROM Sales
INNER JOIN Products ON Sales.product_id = Products.id
GROUP BY Products.id
ORDER BY total_sold DESC
LIMIT 1;"
"Find me the customer who made the most purchases.

TABLE_DEFINITIONS

Customers: id (integer), name (text), email (text), created_at (timestamp)
Purchases: id (integer), customer_id (integer), product_id (integer), purchase_date (timestamp), amount (decimal)","To find the customer who made the most purchases, we will count the number of purchases from the Purchases table for each customer_id. Then, we will sort the results in descending order and limit the results to the one with the highest count. Finally, we will join this result with the Customers table to get the customer details.
            ---------
SELECT Customers.*, COUNT(Purchases.id) as total_purchases
FROM Purchases
INNER JOIN Customers ON Purchases.customer_id = Customers.id
GROUP BY Customers.id
ORDER BY total_purchases DESC
LIMIT 1;"
"Show me the details of the most expensive product.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)","To get the details of the most expensive product, we will sort the products by price in descending order and limit the results to the one with the highest price.
            ---------
SELECT *
FROM Products
ORDER BY price DESC
LIMIT 1;"
"I need to know the total sales for each product.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total sales for each product, we will sum the quantity_sold from the Sales table for each product_id. Then, we will join this result with the Products table to get the product details.
            ---------
SELECT Products.*, SUM(Sales.quantity_sold) as total_sales
FROM Sales
INNER JOIN Products ON Sales.product_id = Products.id
GROUP BY Products.id;"
"Show me the total revenue generated by each product.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total revenue generated by each product, we will sum the product of the price and quantity_sold from the Sales table for each product_id. Then, we will join this result with the Products table to get the product details.
            ---------
SELECT Products.*, SUM(Products.price * Sales.quantity_sold) as total_revenue
FROM Sales
INNER JOIN Products ON Sales.product_id = Products.id
GROUP BY Products.id;"
"Show me the details of the customer who spent the most.

TABLE_DEFINITIONS

Customers: id (integer), name (text), email (text), created_at (timestamp)
Purchases: id (integer), customer_id (integer), product_id (integer), purchase_date (timestamp), amount (decimal)","To find the customer who spent the most, we will sum the amount from the Purchases table for each customer_id. Then, we will sort the results in descending order and limit the results to the one with the highest sum. Finally, we will join this result with the Customers table to get the customer details.
            ---------
SELECT Customers.*, SUM(Purchases.amount) as total_spent
FROM Purchases
INNER JOIN Customers ON Purchases.customer_id = Customers.id
GROUP BY Customers.id
ORDER BY total_spent DESC
LIMIT 1;"
"Show me the details of the most frequently purchased product.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Purchases: id (integer), customer_id (integer), product_id (integer), purchase_date (timestamp), amount (decimal)","To find the most frequently purchased product, we will count the number of purchases from the Purchases table for each product_id. Then, we will sort the results in descending order and limit the results to the one with the highest count. Finally, we will join this result with the Products table to get the product details.
            ---------
SELECT Products.*, COUNT(Purchases.id) as total_purchases
FROM Purchases
INNER JOIN Products ON Purchases.product_id = Products.id
GROUP BY Products.id
ORDER BY total_purchases DESC
LIMIT 1;"
"Show me the total revenue generated by each product in the last month.

TABLE_DEFINITIONS

Products: id (integer), name (text), price (decimal), created_at (timestamp)
Sales: id (integer), product_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total revenue generated by each product in the last month, we will sum the product of the price and quantity_sold from the Sales table for each product_id where the sale_date is within the last month. Then, we will join this result with the Products table to get the product details.
            ---------
SELECT Products.*, SUM(Products.price * Sales.quantity_sold) as total_revenue
FROM Sales
INNER JOIN Products ON Sales.product_id = Products.id
WHERE Sales.sale_date >= (CURRENT_DATE - INTERVAL '1 month')
GROUP BY Products.id;"
"I need to know the total sales for the book titled ""Harry Potter"".

TABLE_DEFINITIONS

Books: id (integer), title (text), author (text), published_date (timestamp)
Sales: id (integer), book_id (integer), quantity_sold (integer), sale_date (timestamp)","To calculate the total sales for the book titled ""Harry Potter"", we will sum the quantity_sold from the Sales table where the book_id matches that of ""Harry Potter"".
            ---------
SELECT SUM(quantity_sold) as total_sales
FROM Sales
WHERE book_id = (SELECT id FROM Books WHERE title = 'Harry Potter');"
